data$sat <- sat
boxplot(data$sat, main = "sat")
boxplot.stats(hsize)$out -> outlier_values
ls <- boxplot.stats(hsize)$stats[5]
hsize[hsize > ls] <- NA
data$hsize <- hsize
boxplot(data$hsize, main = "hsize")
boxplot.stats(hsize)$out -> outlier_values
ls <- boxplot.stats(hsize)$stats[5]
hsize[hsize > ls] <- NA
data$hsize <- hsize
boxplot(data$hsize, main = "hsize")
boxplot.stats(hsize)$out -> outlier_values
ls <- boxplot.stats(hsize)$stats[5]
hsize[hsize > ls] <- NA
data$hsize <- hsize
boxplot(data$hsize, main = "hsize")
summary(data)
if(!require(VIM)){
install.packages('VIM',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(VIM)
}
library(VIM)
data <- kNN(data, k = 11)
data[data$hsize_imp == TRUE |
data$sat_imp == TRUE |
data$colgpa_imp == TRUE,c(1,2,3,4,5,6)]
summary(data[,c("sat", "hsize", "colgpa")])
sat <- data[,c("sat")]
hsize <- data[,c("hsize")]
colgpa <- data[,c("colgpa")]
gpaletter <- cut(colgpa, breaks = c(0, 1.5, 2.50, 3.5, 4), labels = c("D", "C", "B", "A"), include.lowest = TRUE, right = FALSE)
unique(gpaletter[colgpa < 1.50])
unique(gpaletter[colgpa >= 1.5 & colgpa < 2.5])
unique(gpaletter[colgpa >= 2.5 & colgpa < 3.5])
unique(gpaletter[colgpa >= 3.5 & colgpa <= 4])
data$gpaletter <- gpaletter
head(data[,c("gpaletter", "colgpa")])
barplot(prop.table(table(athlete)),
main = "Athletes",
col = c("orange", "blue"),
ylim= c(0,1),
ylab = "percentage of athletes")
ggplot(data =  data, aes(x=athlete, fill=female)) +
geom_bar(position = "fill") +
scale_fill_manual(values = c("orange", "blue"),
labels = c("Men", "Women"),
name = "Sex") +
ggtitle('Athletes en funciÃ³n del sexo') +
theme(panel.background = element_rect(fill = "transparent"),
plot.title = element_text(hjust = 0.5)) +
labs(y="percentage of men and women")
if(!require(modeest)){
install.packages('modeest',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(modeest)
}
library(modeest)
statTable <- function(x)
{
statistics <- cbind(mfv(x), mean(x), var(x), sd(x), t(quantile(x)))
return(statistics)
}
estadisticas <- apply(data[,c("sat", "tothrs", "hsize", "hsrank")],2,statTable)
rownames(estadisticas) <- c("moda", "media", "var", "desv.est", "min", "Q1", "Q2", "Q3", "max")
install.packages("printr", type = "source",
repos=c("http://yihui.name/xran"))
library(printr)
estadisticas
detach("package:printr", unload = TRUE)
hist(sat, main="Histograma de la nota de acceso",col="blue", xlim = c(600,1400))
ggplot(data =  data, aes(x=sat, fill=female)) +
geom_histogram(bins = 30) +
scale_fill_manual(values = c("orange", "blue"),
labels = c("Men", "Women"),
name = "Sex") +
ggtitle('sat en funciÃ³n del sexo') +
theme(plot.title = element_text(hjust = 0.5))
write.csv(data, file = "gpa_clean.csv" ,row.names = FALSE)
version
update.packages()
install.packages("DescTools", type="binary")
install.packages("DescTools", type="binary")
library(DescTools)
tinytex::reinstall_tinytex(repository = "illinois")
if(!require(RCurl)){
install.packages('RCurl',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(RCurl)
}
if(!require(data.table)){
install.packages('data.table',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(data.table)
}
if(!require(tidyr)){
install.packages('tidyr',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(tidyr)
}
if(!require(ggplot2)){
install.packages('ggplot2',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(ggplot2)
}
if(!require(stringr)){
install.packages('stringr',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(stringr)
}
if(!require(funModeling)){
install.packages('funModeling',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(funModeling)
}
if(!require(Hmisc)){install.packages('Hmisc',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(Hmisc)
}
if(!require(plyr)){install.packages('plyr',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(plyr)
}
if(!require(car)){install.packages('car',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(car)
}
if(!require(ggpubr)){install.packages('ggpubr',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(ggpubr)
}
if(!require(lsr)){install.packages('lsr',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(lsr)
}
if(!require(DescTools)){install.packages('DescTools',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(DescTools)
}
if(!require(gridExtra)){
install.packages('gridextra',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(gridExtra)
}
if(!require(caret)){
install.packages('caret',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(caret)
}
if(!require(RCurl)){
install.packages('RCurl',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(RCurl)
}
if(!require(data.table)){
install.packages('data.table',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(data.table)
}
if(!require(tidyr)){
install.packages('tidyr',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(tidyr)
}
if(!require(ggplot2)){
install.packages('ggplot2',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(ggplot2)
}
if(!require(stringr)){
install.packages('stringr',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(stringr)
}
if(!require(funModeling)){
install.packages('funModeling',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(funModeling)
}
if(!require(Hmisc)){install.packages('Hmisc',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(Hmisc)
}
if(!require(plyr)){install.packages('plyr',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(plyr)
}
if(!require(car)){install.packages('car',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(car)
}
if(!require(ggpubr)){install.packages('ggpubr',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(ggpubr)
}
if(!require(lsr)){install.packages('lsr',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(lsr)
}
if(!require(DescTools)){install.packages('DescTools',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(DescTools)
}
if(!require(gridExtra)){
install.packages('gridextra',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(gridExtra)
}
if(!require(caret)){
install.packages('caret',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(caret)
}
if(!require(RCurl)){
install.packages('RCurl',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(RCurl)
}
if(!require(data.table)){
install.packages('data.table',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(data.table)
}
if(!require(tidyr)){
install.packages('tidyr',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(tidyr)
}
if(!require(ggplot2)){
install.packages('ggplot2',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(ggplot2)
}
if(!require(stringr)){
install.packages('stringr',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(stringr)
}
if(!require(funModeling)){
install.packages('funModeling',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(funModeling)
}
if(!require(Hmisc)){install.packages('Hmisc',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(Hmisc)
}
if(!require(plyr)){install.packages('plyr',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(plyr)
}
if(!require(car)){install.packages('car',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(car)
}
if(!require(ggpubr)){install.packages('ggpubr',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(ggpubr)
}
if(!require(lsr)){install.packages('lsr',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(lsr)
}
if(!require(DescTools)){install.packages('DescTools',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(DescTools)
}
if(!require(gridExtra)){
install.packages('gridextra',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(gridExtra)
}
if(!require(caret)){
install.packages('caret',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(caret)
}
if(!require(RCurl)){
install.packages('RCurl',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(RCurl)
}
if(!require(data.table)){
install.packages('data.table',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(data.table)
}
if(!require(tidyr)){
install.packages('tidyr',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(tidyr)
}
if(!require(ggplot2)){
install.packages('ggplot2',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(ggplot2)
}
if(!require(stringr)){
install.packages('stringr',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(stringr)
}
if(!require(funModeling)){
install.packages('funModeling',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(funModeling)
}
if(!require(Hmisc)){install.packages('Hmisc',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(Hmisc)
}
if(!require(plyr)){install.packages('plyr',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(plyr)
}
if(!require(car)){install.packages('car',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(car)
}
if(!require(ggpubr)){install.packages('ggpubr',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(ggpubr)
}
if(!require(lsr)){install.packages('lsr',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(lsr)
}
if(!require(DescTools)){install.packages('DescTools',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(DescTools)
}
if(!require(gridExtra)){
install.packages('gridextra',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(gridExtra)
}
if(!require(caret)){
install.packages('caret',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(caret)
}
.libPaths()
print("Hello")
setwd("C:/Machine Learning/machinelearning-az/datasets/Part 2 - Regression/Section 7 - Support Vector Regression (SVR)")
install.packages("e1071")
library(e17071)
library(e1071)
?svm
dataset <- read.csv('Position_Salaries.csv')
dataset <- dataset[, 2:3]
# Ajustar SVR al modelo
install.packages("e1071")
library(e1071)
regression = svm(formula= Salary ~ .,
data = dataset,
type= "eps-regression",
kernel= "radial")
library(e1071)
regression = svm(formula= Salary ~ .,
data = dataset,
type= "eps-regression",
kernel= "radial")
# PredicciÃ³n de nuevos resulados con RegresiÃ³n
y_pred = predict(regression, newdata = data.frame(Level = 6.5))
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
color = "red") +
geom_line(aes(x = x_grid, y = predict(regression, newdata = data.frame(Level = x_grid))),
color = "blue") +
ggtitle("Modelo de RegresiÃ³n") +
xlab("Nivel del empleado") +
ylab("Sueldo (en $)")
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
color = "red") +
geom_line(aes(x = dataset$Level, y = predict(regression, newdata = data.frame(Level = dataset$Level))),
color = "blue") +
ggtitle("Modelo de RegresiÃ³n") +
xlab("Nivel del empleado") +
ylab("Sueldo (en $)")
setwd("C:/Machine Learning/machinelearning-az/datasets/Part 2 - Regression/Section 8 - Decision Tree Regression")
# Ajustar SVR al modelo
#install.packages("e1071")
library(rpart)
dataset <- read.csv('Position_Salaries.csv')
dataset <- dataset[, 2:3]
View(dataset)
View(dataset)
regression = rpart(formula= Salary ~ .,
data = dataset)
# PredicciÃ³n de nuevos resulados con Ãrbol de DecisiÃ³n de RegresiÃ³n
y_pred = predict(regression, newdata = data.frame(Level = 6.5))
library(ggplot2)
#x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
color = "red") +
geom_line(aes(x = dataset$Level, y = predict(regression, newdata = data.frame(Level = dataset$Level))),
color = "blue") +
ggtitle("Modelo de Ãrbol de DecisiÃ³n de RegresiÃ³n") +
xlab("Nivel del empleado") +
ylab("Sueldo (en $)")
regression = rpart(formula= Salary ~ .,
data= dataset,
control= rpart.control(minsplit= 1))
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
color = "red") +
geom_line(aes(x = dataset$Level, y = predict(regression, newdata = data.frame(Level = dataset$Level))),
color = "blue") +
ggtitle("Modelo de Ãrbol de DecisiÃ³n de RegresiÃ³n") +
xlab("Nivel del empleado") +
ylab("Sueldo (en $)")
# PredicciÃ³n de nuevos resulados con Ãrbol de DecisiÃ³n de RegresiÃ³n
y_pred = predict(regression, newdata = data.frame(Level = 6.5))
X_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
color = "red") +
geom_line(aes(x = X_grid, y = predict(regression, newdata = data.frame(Level = X_grid))),
color = "blue") +
ggtitle("Modelo de Ãrbol de DecisiÃ³n de RegresiÃ³n") +
xlab("Nivel del empleado") +
ylab("Sueldo (en $)")
# PredicciÃ³n de nuevos resulados con Ãrbol de DecisiÃ³n de RegresiÃ³n
y_pred = predict(regression, newdata = data.frame(Level = 6.5))
setwd("C:/Machine Learning/machinelearning-az/datasets/Part 2 - Regression/Section 9 - Random Forest Regression")
# Ajustar RANDOM FOREST  al modelo
install.packages("randomForest")
# Ajustar RANDOM FOREST  al modelo
#install.packages("randomForest")
library(randomForest)
?randomForest
set.seed(1234)
regression = randomForest(x = dataset[1],
y = dataset$Salary,
ntree = 10)
dataset <- read.csv('Position_Salaries.csv')
dataset <-
View(dataset)
# Importar el dataset
dataset <- read.csv('Position_Salaries.csv')
View(dataset)
dataset <- dataset[, 2:3]
library(randomForest)
set.seed(1234)
regression = randomForest(x = dataset[1],
y = dataset$Salary,
ntree = 10)
library(ggplot2)
X_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
color = "red") +
geom_line(aes(x = X_grid, y = predict(regression, newdata = data.frame(Level = X_grid))),
color = "blue") +
ggtitle("Modelo de Random Forest de RegresiÃ³n") +
xlab("Nivel del empleado") +
ylab("Sueldo (en $)")
# PredicciÃ³n de nuevos resulados con RANDOM FOREST RegresiÃ³n
y_pred = predict(regression, newdata = data.frame(Level = 6.5))
set.seed(1234)
regression = randomForest(x = dataset[1],
y = dataset$Salary,
ntree = 100)
# PredicciÃ³n de nuevos resulados con RANDOM FOREST RegresiÃ³n
y_pred = predict(regression, newdata = data.frame(Level = 6.5))
# VisualizaciÃ³n del modelo de RANDOM FOREST de regresiÃ³n
library(ggplot2)
X_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
color = "red") +
geom_line(aes(x = X_grid, y = predict(regression, newdata = data.frame(Level = X_grid))),
color = "blue") +
ggtitle("Modelo de Random Forest de RegresiÃ³n") +
xlab("Nivel del empleado") +
ylab("Sueldo (en $)")
library(randomForest)
set.seed(1234)
regression = randomForest(x = dataset[1],
y = dataset$Salary,
ntree = 300)
# PredicciÃ³n de nuevos resulados con RANDOM FOREST RegresiÃ³n
y_pred = predict(regression, newdata = data.frame(Level = 6.5))
# VisualizaciÃ³n del modelo de RANDOM FOREST de regresiÃ³n
library(ggplot2)
X_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
color = "red") +
geom_line(aes(x = X_grid, y = predict(regression, newdata = data.frame(Level = X_grid))),
color = "blue") +
ggtitle("Modelo de Random Forest de RegresiÃ³n") +
xlab("Nivel del empleado") +
ylab("Sueldo (en $)")
# PredicciÃ³n de nuevos resulados con RANDOM FOREST RegresiÃ³n
y_pred = predict(regression, newdata = data.frame(Level = 6.5))
set.seed(1234)
regression = randomForest(x = dataset[1],
y = dataset$Salary,
ntree = 500)
# PredicciÃ³n de nuevos resulados con RANDOM FOREST RegresiÃ³n
y_pred = predict(regression, newdata = data.frame(Level = 6.5))
# VisualizaciÃ³n del modelo de RANDOM FOREST de regresiÃ³n
library(ggplot2)
X_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
color = "red") +
geom_line(aes(x = X_grid, y = predict(regression, newdata = data.frame(Level = X_grid))),
color = "blue") +
ggtitle("Modelo de Random Forest de RegresiÃ³n") +
xlab("Nivel del empleado") +
ylab("Sueldo (en $)")
set.seed(1234)
regression = randomForest(x = dataset[1],
y = dataset$Salary,
ntree = 500)
# PredicciÃ³n de nuevos resulados con RANDOM FOREST RegresiÃ³n
y_pred = predict(regression, newdata = data.frame(Level = 6.5))
# VisualizaciÃ³n del modelo de RANDOM FOREST de regresiÃ³n
library(ggplot2)
X_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
color = "red") +
geom_line(aes(x = X_grid, y = predict(regression, newdata = data.frame(Level = X_grid))),
color = "blue") +
ggtitle("Modelo de Random Forest de RegresiÃ³n") +
xlab("Nivel del empleado") +
ylab("Sueldo (en $)")
set.seed(1234)
regression = randomForest(x = dataset[1],
y = dataset$Salary,
ntree = 500)
# PredicciÃ³n de nuevos resulados con RANDOM FOREST RegresiÃ³n
y_pred = predict(regression, newdata = data.frame(Level = 6.5))
# VisualizaciÃ³n del modelo de RANDOM FOREST de regresiÃ³n
library(ggplot2)
X_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
color = "red") +
geom_line(aes(x = X_grid, y = predict(regression, newdata = data.frame(Level = X_grid))),
color = "blue") +
ggtitle("Modelo de Random Forest de RegresiÃ³n") +
xlab("Nivel del empleado") +
ylab("Sueldo (en $)")
set.seed(1234)
regression = randomForest(x = dataset[1],
y = dataset$Salary,
ntree = 500)
# PredicciÃ³n de nuevos resulados con RANDOM FOREST RegresiÃ³n
y_pred = predict(regression, newdata = data.frame(Level = 6.5))
# VisualizaciÃ³n del modelo de RANDOM FOREST de regresiÃ³n
library(ggplot2)
X_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
color = "red") +
geom_line(aes(x = X_grid, y = predict(regression, newdata = data.frame(Level = X_grid))),
color = "blue") +
ggtitle("Modelo de Random Forest de RegresiÃ³n") +
xlab("Nivel del empleado") +
ylab("Sueldo (en $)")
