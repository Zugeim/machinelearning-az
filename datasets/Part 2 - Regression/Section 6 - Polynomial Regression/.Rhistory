ls <- boxplot.stats(hsize)$stats[5]
hsize[hsize > ls] <- NA
data$hsize <- hsize
boxplot(data$hsize, main = "hsize")
boxplot.stats(hsize)$out -> outlier_values
ls <- boxplot.stats(hsize)$stats[5]
hsize[hsize > ls] <- NA
data$hsize <- hsize
boxplot(data$hsize, main = "hsize")
summary(data)
if(!require(VIM)){
install.packages('VIM',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(VIM)
}
library(VIM)
data <- kNN(data, k = 11)
data[data$hsize_imp == TRUE |
data$sat_imp == TRUE |
data$colgpa_imp == TRUE,c(1,2,3,4,5,6)]
summary(data[,c("sat", "hsize", "colgpa")])
sat <- data[,c("sat")]
hsize <- data[,c("hsize")]
colgpa <- data[,c("colgpa")]
gpaletter <- cut(colgpa, breaks = c(0, 1.5, 2.50, 3.5, 4), labels = c("D", "C", "B", "A"), include.lowest = TRUE, right = FALSE)
unique(gpaletter[colgpa < 1.50])
unique(gpaletter[colgpa >= 1.5 & colgpa < 2.5])
unique(gpaletter[colgpa >= 2.5 & colgpa < 3.5])
unique(gpaletter[colgpa >= 3.5 & colgpa <= 4])
data$gpaletter <- gpaletter
head(data[,c("gpaletter", "colgpa")])
barplot(prop.table(table(athlete)),
main = "Athletes",
col = c("orange", "blue"),
ylim= c(0,1),
ylab = "percentage of athletes")
ggplot(data =  data, aes(x=athlete, fill=female)) +
geom_bar(position = "fill") +
scale_fill_manual(values = c("orange", "blue"),
labels = c("Men", "Women"),
name = "Sex") +
ggtitle('Athletes en funciÃ³n del sexo') +
theme(panel.background = element_rect(fill = "transparent"),
plot.title = element_text(hjust = 0.5)) +
labs(y="percentage of men and women")
if(!require(modeest)){
install.packages('modeest',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(modeest)
}
library(modeest)
statTable <- function(x)
{
statistics <- cbind(mfv(x), mean(x), var(x), sd(x), t(quantile(x)))
return(statistics)
}
estadisticas <- apply(data[,c("sat", "tothrs", "hsize", "hsrank")],2,statTable)
rownames(estadisticas) <- c("moda", "media", "var", "desv.est", "min", "Q1", "Q2", "Q3", "max")
install.packages("printr", type = "source",
repos=c("http://yihui.name/xran"))
library(printr)
estadisticas
detach("package:printr", unload = TRUE)
hist(sat, main="Histograma de la nota de acceso",col="blue", xlim = c(600,1400))
ggplot(data =  data, aes(x=sat, fill=female)) +
geom_histogram(bins = 30) +
scale_fill_manual(values = c("orange", "blue"),
labels = c("Men", "Women"),
name = "Sex") +
ggtitle('sat en funciÃ³n del sexo') +
theme(plot.title = element_text(hjust = 0.5))
write.csv(data, file = "gpa_clean.csv" ,row.names = FALSE)
version
update.packages()
install.packages("DescTools", type="binary")
install.packages("DescTools", type="binary")
library(DescTools)
tinytex::reinstall_tinytex(repository = "illinois")
if(!require(RCurl)){
install.packages('RCurl',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(RCurl)
}
if(!require(data.table)){
install.packages('data.table',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(data.table)
}
if(!require(tidyr)){
install.packages('tidyr',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(tidyr)
}
if(!require(ggplot2)){
install.packages('ggplot2',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(ggplot2)
}
if(!require(stringr)){
install.packages('stringr',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(stringr)
}
if(!require(funModeling)){
install.packages('funModeling',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(funModeling)
}
if(!require(Hmisc)){install.packages('Hmisc',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(Hmisc)
}
if(!require(plyr)){install.packages('plyr',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(plyr)
}
if(!require(car)){install.packages('car',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(car)
}
if(!require(ggpubr)){install.packages('ggpubr',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(ggpubr)
}
if(!require(lsr)){install.packages('lsr',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(lsr)
}
if(!require(DescTools)){install.packages('DescTools',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(DescTools)
}
if(!require(gridExtra)){
install.packages('gridextra',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(gridExtra)
}
if(!require(caret)){
install.packages('caret',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(caret)
}
if(!require(RCurl)){
install.packages('RCurl',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(RCurl)
}
if(!require(data.table)){
install.packages('data.table',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(data.table)
}
if(!require(tidyr)){
install.packages('tidyr',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(tidyr)
}
if(!require(ggplot2)){
install.packages('ggplot2',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(ggplot2)
}
if(!require(stringr)){
install.packages('stringr',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(stringr)
}
if(!require(funModeling)){
install.packages('funModeling',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(funModeling)
}
if(!require(Hmisc)){install.packages('Hmisc',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(Hmisc)
}
if(!require(plyr)){install.packages('plyr',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(plyr)
}
if(!require(car)){install.packages('car',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(car)
}
if(!require(ggpubr)){install.packages('ggpubr',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(ggpubr)
}
if(!require(lsr)){install.packages('lsr',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(lsr)
}
if(!require(DescTools)){install.packages('DescTools',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(DescTools)
}
if(!require(gridExtra)){
install.packages('gridextra',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(gridExtra)
}
if(!require(caret)){
install.packages('caret',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(caret)
}
if(!require(RCurl)){
install.packages('RCurl',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(RCurl)
}
if(!require(data.table)){
install.packages('data.table',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(data.table)
}
if(!require(tidyr)){
install.packages('tidyr',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(tidyr)
}
if(!require(ggplot2)){
install.packages('ggplot2',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(ggplot2)
}
if(!require(stringr)){
install.packages('stringr',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(stringr)
}
if(!require(funModeling)){
install.packages('funModeling',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(funModeling)
}
if(!require(Hmisc)){install.packages('Hmisc',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(Hmisc)
}
if(!require(plyr)){install.packages('plyr',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(plyr)
}
if(!require(car)){install.packages('car',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(car)
}
if(!require(ggpubr)){install.packages('ggpubr',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(ggpubr)
}
if(!require(lsr)){install.packages('lsr',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(lsr)
}
if(!require(DescTools)){install.packages('DescTools',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(DescTools)
}
if(!require(gridExtra)){
install.packages('gridextra',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(gridExtra)
}
if(!require(caret)){
install.packages('caret',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(caret)
}
if(!require(RCurl)){
install.packages('RCurl',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(RCurl)
}
if(!require(data.table)){
install.packages('data.table',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(data.table)
}
if(!require(tidyr)){
install.packages('tidyr',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(tidyr)
}
if(!require(ggplot2)){
install.packages('ggplot2',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(ggplot2)
}
if(!require(stringr)){
install.packages('stringr',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(stringr)
}
if(!require(funModeling)){
install.packages('funModeling',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(funModeling)
}
if(!require(Hmisc)){install.packages('Hmisc',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(Hmisc)
}
if(!require(plyr)){install.packages('plyr',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(plyr)
}
if(!require(car)){install.packages('car',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(car)
}
if(!require(ggpubr)){install.packages('ggpubr',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(ggpubr)
}
if(!require(lsr)){install.packages('lsr',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(lsr)
}
if(!require(DescTools)){install.packages('DescTools',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(DescTools)
}
if(!require(gridExtra)){
install.packages('gridextra',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(gridExtra)
}
if(!require(caret)){
install.packages('caret',dependencies =c("Depends","Imports"),repos='http://cran.es.r-project.org')
require(caret)
}
.libPaths()
print("Hello")
setwd("C:/Machine Learning/machinelearning-az/datasets/Part 2 - Regression/Section 4 - Simple Linear Regression")
# Importar el dataset
dataset <- read.csv('Salary_Data.csv')
# Dividir los datos en training y testing
#install.packages("caTools")
library(caTools)
# Dividir los datos en training y testing
install.packages("caTools")
library(caTools)
set.seed(123)
split <- sample.split(dataset$Salary, SplitRatio = 2/3)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
# Ajustar el modelo de regresi?n lineal simple con el conjunto de entrenamiento
regressor = lm(formula = Salary ~ YearsExperience,
data = training_set)
summary(regressor)
# Predecir resultados con el conjunto de Test
y_pred = predict(regressor, newdata = testing_set)
# Visualizaci?n de los resultados en el conjunto de entrenamiento
install.packages("ggplot2")
library(ggplot2)
brary(ggplot2)
ggplot() +
geom_point(aes(x = training_set$YearsExperience, y = training_set$Salary),
colour = "red") +
geom_line(aes(x = training_set$YearsExperience,
y = predict(regressor, newdata = training_set)),
colour = "blue") +
ggtitle("Sueldo vs AÃ±os de Experiencia (Conjunto de Entrenamiento)") +
xlab("AÃ±os de Experiencia") +
ylab("Sueldo en ($)")
# VisualizaciÃ³n de los resultados en el conjunto de testing
#install.packages("ggplot2")
library(ggplot2)
ggplot() +
geom_point(aes(x = testing_set$YearsExperience, y = testing_set$Salary),
colour = "red") +
geom_line(aes(x = training_set$YearsExperience,
y = predict(regressor, newdata = training_set)),
colour = "blue") +
ggtitle("Sueldo vs AÃ±os de Experiencia (Conjunto de Entrenamiento)") +
xlab("AÃ±os de Experiencia") +
ylab("Sueldo en ($)")
# VisualizaciÃ³n de los resultados en el conjunto de testing
#install.packages("ggplot2")
library(ggplot2)
ggplot() +
geom_point(aes(x = testing_set$YearsExperience, y = testing_set$Salary),
colour = "red") +
geom_line(aes(x = training_set$YearsExperience,
y = predict(regressor, newdata = training_set)),
colour = "blue") +
ggtitle("Sueldo vs AÃ±os de Experiencia (Conjunto de Testing)") +
xlab("AÃ±os de Experiencia") +
ylab("Sueldo en ($)")
setwd("C:/Machine Learning/machinelearning-az/datasets/Part 2 - Regression/Section 5 - Multiple Linear Regression")
dataset <- read.csv('50_Startups.csv')
View(dataset)
# Codificar las variables categ?ricas
dataset$State <- factor(dataset$State,
levels = c("New York", "California", "Florida"),
labels = c(1, 2, 3))
View(dataset)
View(dataset)
library(caTools)
set.seed(123)
split <- sample.split(dataset$Profit, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
regression= lm(formula = Profit ~ .,
data = training_set)
summary(regressor)
summary(regression)
y_pred = predict(regression, newdata = testing_set)
y_pred
# Construir un modelo Ã³ptimo con la EliminaciÃ³n hacia atrÃ¡s
regression = lm(formula = Profit ~ R.D.Spend + Administration + Marketing.Spend + State,
data = training_set)
summary(regression)
# Eliminamos State
regression = lm(formula = Profit ~ R.D.Spend + Administration + Marketing.Spend,
data = training_set)
summary(regression)
# Eliminamos Administration
regression = lm(formula = Profit ~ R.D.Spend + Marketing.Spend,
data = training_set)
summary(regression)
# Eliminamos Marketing.Spend
regression = lm(formula = Profit ~ R.D.Spend,
data = training_set)
summary(regression)
# AutomatizaciÃ³n
backwardElimination <- function(x, sl) {
numVars = length(x)
for (i in c(1:numVars)){
regressor = lm(formula = Profit ~ ., data = x)
maxVar = max(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"])
if (maxVar > sl){
j = which(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"] == maxVar)
x = x[, -j]
}
numVars = numVars - 1
}
return(summary(regressor))
}
backwardElimination <- function(x, sl) {
numVars = length(x)
for (i in c(1:numVars)){
regressor = lm(formula = Profit ~ ., data = x)
maxVar = max(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"])
if (maxVar > sl){
j = which(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"] == maxVar)
x = x[, -j]
}
numVars = numVars - 1
}
return(summary(regressor))
}
SL = 0.05
dataset = dataset[, c(1,2,3,4,5)]
backwardElimination(training_set, SL)
setwd("C:/Machine Learning/machinelearning-az/datasets/Part 2 - Regression/Section 6 - Polynomial Regression")
# Importar el dataset
dataset <- read.csv('Position_Salaries.csv')
View(dataset)
View(dataset)
View(dataset)
View(dataset)
dataset <- dataset[, 2:3]
View(dataset)
# Ajustar el modelo de regresiÃ³n lineal con el Conjunto de Datos
lin_reg = lm(formula = Salary ~ .,
data = dataset)
summary(lin_reg)
# Ajustar el modelo de regresiÃ³n lineal polinomico con el Conjunto de Datos
dataset$Level2 <- dataset$Level^2
View(dataset)
dataset$Level3 <- dataset$Level^3
poly_reg = lm(formula = Salary ~ .,
data = training_set)
poly_reg = lm(formula = Salary ~ .,
data = dataset)
summary(poly_reg)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
color = "red") +
geom_line(aes(x = dataset$Level, y = predict(lin_reg, newdata = dataset)),
color = "blue") +
ggtitle("PredicciÃ³n lineal del sueldo en funciÃ³n del nivel del empleado") +
xlab("Nivel del empleado") +
ylab("Sueldo (en $)")
# VisualizaciÃ³n del modelo polinÃ³mico
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
color = "red") +
geom_line(aes(x = dataset$Level, y = predict(poly_reg, newdata = dataset)),
color = "blue") +
ggtitle("PredicciÃ³n polinomica del sueldo en funciÃ³n del nivel del empleado") +
xlab("Nivel del empleado") +
ylab("Sueldo (en $)")
# VisualizaciÃ³n del modelo polinÃ³mico
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
color = "red") +
geom_curve(aes(x = dataset$Level, y = predict(poly_reg, newdata = dataset)),
color = "blue") +
ggtitle("PredicciÃ³n polinomica del sueldo en funciÃ³n del nivel del empleado") +
xlab("Nivel del empleado") +
ylab("Sueldo (en $)")
# VisualizaciÃ³n del modelo polinÃ³mico
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
color = "red") +
geom_curve(aes(x = dataset$Level, y = predict(poly_reg, newdata = dataset)),
color = "blue") +
ggtitle("PredicciÃ³n polinomica del sueldo en funciÃ³n del nivel del empleado") +
xlab("Nivel del empleado") +
ylab("Sueldo (en $)")
# VisualizaciÃ³n del modelo polinÃ³mico
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
color = "red") +
geom_line(aes(x = dataset$Level, y = predict(poly_reg, newdata = dataset)),
color = "blue") +
ggtitle("PredicciÃ³n polinomica del sueldo en funciÃ³n del nivel del empleado") +
xlab("Nivel del empleado") +
ylab("Sueldo (en $)")
dataset$Level2 <- dataset$Level^2
dataset$Level3 <- dataset$Level^3
dataset$Level4 <- dataset$Level^4
poly_reg = lm(formula = Salary ~ .,
data = dataset)
summary(poly_reg)
# VisualizaciÃ³n del modelo polinÃ³mico
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
color = "red") +
geom_line(aes(x = dataset$Level, y = predict(poly_reg, newdata = dataset)),
color = "blue") +
ggtitle("PredicciÃ³n polinomica del sueldo en funciÃ³n del nivel del empleado") +
xlab("Nivel del empleado") +
ylab("Sueldo (en $)")
# PredicciÃ³n de nuevos resultados con RegresiÃ³n Lineal
y_pred = predict(lin_reg, newdata = data.frame(Level = 6.5))
# PredicciÃ³n de nuevos resulados con RegresiÃ³n PolinÃ³mica
y_pred = predict(poly_reg, newdata = data.frame(Level = 6.5,
Level2 = 6.5^2,
Level3 = 6.5^3,
Level4 = 6.5^4))
# VisualizaciÃ³n del modelo polinÃ³mico
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
color = "red") +
geom_line(aes(x = x_grid, y = predict(poly_reg, newdata = data.frame(Level = x_grid,
Level1 = x_grid^2,
Level2 = x_grid^3,
Level3 = x_grid^4))),
color = "blue") +
ggtitle("PredicciÃ³n polinomica del sueldo en funciÃ³n del nivel del empleado") +
xlab("Nivel del empleado") +
ylab("Sueldo (en $)")
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
color = "red") +
geom_line(aes(x = x_grid, y = predict(poly_reg, newdata = data.frame(Level = x_grid,
Level2 = x_grid^2,
Level3 = x_grid^3,
Level4 = x_grid^4))),
color = "blue") +
ggtitle("PredicciÃ³n polinomica del sueldo en funciÃ³n del nivel del empleado") +
xlab("Nivel del empleado") +
ylab("Sueldo (en $)")
